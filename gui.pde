/* =========================================================
 * ====                   WARNING                        ===
 * =========================================================
 * The code in this tab has been generated from the GUI form
 * designer and care should be taken when editing this file.
 * Only add/edit code inside the event handlers i.e. only
 * use lines between the matching comment tags. e.g.

 void myBtnEvents(GButton button) { //_CODE_:button1:12356:
     // It is safe to enter your event code here  
 } //_CODE_:button1:12356:
 
 * Do not rename this tab!
 * =========================================================
 */

public void panel1_Click1(GPanel source, GEvent event) { //_CODE_:panel1:480939:
  println("panel1 - GPanel >> GEvent." + event + " @ " + millis());
} //_CODE_:panel1:480939:

public void knob1_turn1(GKnob source, GEvent event) { //_CODE_:knob1:911675:
  println("knob1 - GKnob >> GEvent." + event + " @ " + millis());
} //_CODE_:knob1:911675:

public void stick1_change1(GStick source, GEvent event) { //_CODE_:stick1:697706:
  println("stick1 - GStick >> GEvent." + event + " @ " + millis());
} //_CODE_:stick1:697706:

public void button1_click1(GButton source, GEvent event) { //_CODE_:button1:345763:
  println("button1 - GButton >> GEvent." + event + " @ " + millis());
} //_CODE_:button1:345763:

public void panel2_Click1(GPanel source, GEvent event) { //_CODE_:panel2:290102:
  println("panel2 - GPanel >> GEvent." + event + " @ " + millis());
} //_CODE_:panel2:290102:

public void button2_click1(GButton source, GEvent event) { //_CODE_:button2:850717:
  println("button2 - GButton >> GEvent." + event + " @ " + millis());
} //_CODE_:button2:850717:

public void textfield1_change1(GTextField source, GEvent event) { //_CODE_:textfield1:702505:
  println("textfield1 - GTextField >> GEvent." + event + " @ " + millis());
} //_CODE_:textfield1:702505:

public void custom_slider1_change1(GCustomSlider source, GEvent event) { //_CODE_:custom_slider1:589737:
  println("custom_slider1 - GCustomSlider >> GEvent." + event + " @ " + millis());
} //_CODE_:custom_slider1:589737:

public void dropList1_click1(GDropList source, GEvent event) { //_CODE_:Ducks:308627:
  println("Ducks - GDropList >> GEvent." + event + " @ " + millis());
} //_CODE_:Ducks:308627:

public void slider1_change1(GSlider source, GEvent event) { //_CODE_:slider1:626747:
  println("slider1 - GSlider >> GEvent." + event + " @ " + millis());
} //_CODE_:slider1:626747:



// Create all the GUI controls. 
// autogenerated do not edit
public void createGUI(){
  G4P.messagesEnabled(false);
  G4P.setGlobalColorScheme(GCScheme.BLUE_SCHEME);
  G4P.setCursor(ARROW);
  surface.setTitle("Sketch Window");
  sketchPad1 = new GSketchPad(this, 260, 181, 80, 60);
  sketchPad2 = new GSketchPad(this, 197, 185, 101, 60);
  panel1 = new GPanel(this, 14, 126, 100, 60, "Tittel");
  panel1.setText("Tittel");
  panel1.setTextBold();
  panel1.setOpaque(true);
  panel1.addEventHandler(this, "panel1_Click1");
  knob1 = new GKnob(this, 11, 128, 60, 60, 0.8);
  knob1.setTurnRange(110, 70);
  knob1.setTurnMode(GKnob.CTRL_HORIZONTAL);
  knob1.setSensitivity(1);
  knob1.setShowArcOnly(false);
  knob1.setOverArcOnly(false);
  knob1.setIncludeOverBezel(false);
  knob1.setShowTrack(true);
  knob1.setLimits(0.5, 0.0, 1.0);
  knob1.setStickToTicks(true);
  knob1.setShowTicks(true);
  knob1.setOpaque(true);
  knob1.addEventHandler(this, "knob1_turn1");
  stick1 = new GStick(this, 107, 123, 60, 60);
  stick1.setMode(G4P.X4);
  stick1.setOpaque(false);
  stick1.addEventHandler(this, "stick1_change1");
  label1 = new GLabel(this, -15, -121, 80, 20);
  label1.setTextAlign(GAlign.CENTER, GAlign.MIDDLE);
  label1.setText("Effeckt");
  label1.setOpaque(false);
  button1 = new GButton(this, 196, 154, 80, 30);
  button1.setText("reset");
  button1.setTextBold();
  button1.addEventHandler(this, "button1_click1");
  panel2 = new GPanel(this, 0, 0, 100, 60, "Tittel");
  panel2.setText("Tittel");
  panel2.setTextBold();
  panel2.setOpaque(true);
  panel2.addEventHandler(this, "panel2_Click1");
  button2 = new GButton(this, 294, 154, 80, 30);
  button2.setText("Start");
  button2.setTextBold();
  button2.addEventHandler(this, "button2_click1");
  textfield1 = new GTextField(this, 12, -48, 160, 30, G4P.SCROLLBARS_NONE);
  textfield1.setOpaque(true);
  textfield1.addEventHandler(this, "textfield1_change1");
  sketchPad3 = new GSketchPad(this, 10, 0, 200, 60);
  panel1.addControl(knob1);
  panel1.addControl(stick1);
  panel1.addControl(label1);
  panel1.addControl(button1);
  panel1.addControl(panel2);
  panel1.addControl(button2);
  panel1.addControl(textfield1);
  panel1.addControl(sketchPad3);
  custom_slider1 = new GCustomSlider(this, 15, 23, 100, 40, "green_red20px");
  custom_slider1.setShowValue(true);
  custom_slider1.setLimits(5.0, 0.0, 10.0);
  custom_slider1.setNbrTicks(10);
  custom_slider1.setShowTicks(true);
  custom_slider1.setNumberFormat(G4P.DECIMAL, 1);
  custom_slider1.setLocalColorScheme(GCScheme.YELLOW_SCHEME);
  custom_slider1.setOpaque(false);
  custom_slider1.addEventHandler(this, "custom_slider1_change1");
  Ducks = new GDropList(this, 126, 14, 90, 100, 4);
  Ducks.setItems(loadStrings("list_308627"), 0);
  Ducks.addEventHandler(this, "dropList1_click1");
  slider1 = new GSlider(this, 282, 225, 100, 40, 10.0);
  slider1.setLimits(0.5, 0.0, 1.0);
  slider1.setNumberFormat(G4P.DECIMAL, 2);
  slider1.setOpaque(false);
  slider1.addEventHandler(this, "slider1_change1");
  togGroup1 = new GToggleGroup();
}

// Variable declarations 
// autogenerated do not edit
GSketchPad sketchPad1; 
GSketchPad sketchPad2; 
GPanel panel1; 
GKnob knob1; 
GStick stick1; 
GLabel label1; 
GButton button1; 
GPanel panel2; 
GButton button2; 
GTextField textfield1; 
GSketchPad sketchPad3; 
GCustomSlider custom_slider1; 
GDropList Ducks; 
GSlider slider1; 
GToggleGroup togGroup1; 